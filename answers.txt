Вопросы

1. Какими способами можно сделать горизонтальное выравнивание по центру? Минимум 3 варианта, можно больше
justify-items: center; 
justify-self: center; 
justify-content: center; 

2. Что за единица измерения - `fr`?
Метод "фракция" позволяет задавать ширину треков с использованием единиц измерения fr. Фракция — доли доступного пространства на треке, которое можно разделить на сколько угодно частей. Все элементы контейнера, размер которых равен 1fr, имеют одинаковый размер, независимо от их количества. Могут использоваться для создания гибких и отзывчивых сеток без необходимости явного указания процентных значений.

3. Как можно задать грид с 5 колонками шириной по 20%? Минимум 2 способа.
grid-template-columns: 20% 20% 20% 20% 20%;
grid-template-columns: repeat(5, 20%);
grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
grid-template-columns: repeat(5, 1fr);

4. Самостоятельно разберитесь, что такое `auto-fill` и `auto-fit` ?
При разработке, не всегда известно количество колонок — нам нужно просто уместить столько, сколько получится.
Для этого существуют значения auto-fill и auto-fit, которые используются в связке с уже знакомым тебе repeat()
`auto-fill` пытается поместить наибольшее количество повторяющихся элементов в колонку, сколько их может уместиться без переполнения. Когда места для добавления другого элемента не хватает, следующий элемент будет размещён на следующей строке, а это место, которое он не смог заполнить, останется пустым.
`auto-fit` ведёт себя почти как auto-fill, за исключением того, что любая пустая область будет схлопываться и растягивать элементы в этой строке – напоминая поведение флексбоксов, когда по мере уменьшения доступного пространства колонки схлопываются.

5. Как сделать такую табличку? Параметры: первая колонка шириной 100 пикселей, вторая 30%. Первая строчка высотой 200 пикселей, вторая строчка 100 пикселей.   
html:
<body>
    <div class="container">
        <div class="block">1</div>
        <div class="block">2</div>
        <div class="block">3</div>
        <div class="block">4</div>
        <div class="block">5</div>
        <div class="block">6</div>
    </div>
</body>

css:
.container {
    display: grid;
    grid-template-columns: 100px 30% 1fr;
    grid-template-rows: 200px 100px;
    gap: 10px;
}
.block{
    border: 1px solid;
}

6. Как сделать такое выравнивание в грид-контейнере?   
justify-content: space-between;
 
7. Что такое и как задается 'grid area'?
Свойство grid-area задает размер и расположение элемента сетки в макете сетки и является сокращенным свойством для следующих свойств:
grid-row-start
grid-column-start
grid-row-end
grid-column-end.
задается следующим образом:
grid-area: 3 / 1 / 5 / 3;
где каждое значение соответвует указанным выше свойствам в той же последовательности, как они прописаны, обозначает грид-линию с которой начинается элемент в 4х направлениях.
Также можно прописать через именованные области, предварительно задав их в grid-template-areas, например, grid-area: header;

8. Приведите пример использования `grid-template-areas`
Свойство grid-template-areas позволяет задать шаблон сетки расположения элементов внутри грид-контейнера. Имена областей задаются при помощи свойства grid-area. Текущее свойство grid-template-areas просто указывает, где должны располагаться эти грид-области. 
Возможные значения:
none (значение по умолчанию) — области сетки не задано имя.
. — означает пустую ячейку.
название — название области, может быть абсолютно любым словом или даже эмодзи! 

  grid-template-areas: "header header header"
                       "sidebar content-1 content-1"
                       "sidebar content-2 content-3"
                        "footer footer footer";

9. Каким свойством можно задать такое поведение элементов? 
Сойством auto-fill
   
10. Самостоятельно разберись, как работают именованные линии? Есть ли какие-то рекомендованные правила наименований? Если да, то какие?
Линии могут быть названы явно в свойствах grid-template-rows и grid-template-columns или неявно путем создания именованных областей сетки в свойстве grid-template-areas.
Имя линии может быть любым, при указании в значении свойства оно заключается в квадратные скобки. В качестве имени линии нельзя использовать слово span.
Имена линий можно добавить к неявным именам линий сетки, созданным свойством grid-template-areas, принимая вид name-start и name-end. Имена линий сетки никогда не заменяют другие имена линий сетки. Вместо этого они просто накапливаются.
Например,
.container{
  display: grid;
  grid-template-columns: [main-start] 1fr [content-start] 1fr [content-end] 1fr [main-end];
  grid-template-rows: [main-start] 100px [content-start] 100px [content-end] 100px [main-end];
}
При необходимости можно присвоить строке более одного имени. Например, sidebar-end для обозначении конца области sidebar, и main-start для начала области main. Укажите имена внутри квадратных скобок через пробел [sidebar-end main-start]. В дальнейшем вы можете обращаться к этой строке по любому из этих имён

11. Как проще всего задать 12 одинаковых по ширине колонок?
grid-template-columns: repeat(12, 1fr);

12. Изучи материалы и найдите, для каких ситуаций подходит `position: fixed`? 
для закрепления сайдбара, например.

13. Каким способом лучше всего верстать большие блоки текста?
C помощью css grid layout


